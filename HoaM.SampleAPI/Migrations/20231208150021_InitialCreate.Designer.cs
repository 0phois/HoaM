// <auto-generated />
using System;
using HoaM.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HoaM.SampleAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231208150021_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("AssociationMemberCommittee", b =>
                {
                    b.Property<Guid>("CommitteeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MembersId")
                        .HasColumnType("TEXT");

                    b.HasKey("CommitteeId", "MembersId");

                    b.HasIndex("MembersId");

                    b.ToTable("AssociationMemberCommittee");
                });

            modelBuilder.Entity("AssociationMemberMeetingMinutes", b =>
                {
                    b.Property<Guid>("AttendeesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MeetingMinutesId")
                        .HasColumnType("TEXT");

                    b.HasKey("AttendeesId", "MeetingMinutesId");

                    b.HasIndex("MeetingMinutesId");

                    b.ToTable("AssociationMemberMeetingMinutes");
                });

            modelBuilder.Entity("HoaM.Domain.Features.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CommunityId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPinned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("PublishedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.ToTable("Articles", (string)null);
                });

            modelBuilder.Entity("HoaM.Domain.Features.AssociationFee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CommunityId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DeletionDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.ToTable("AssociationFees", (string)null);
                });

            modelBuilder.Entity("HoaM.Domain.Features.AssociationMember", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CommunityId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DeletionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParcelId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("ParcelId");

                    b.ToTable("AssociationMembers", (string)null);
                });

            modelBuilder.Entity("HoaM.Domain.Features.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChangedColumns")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("When")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Who")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Who");

                    b.ToTable("AuditLogs", (string)null);
                });

            modelBuilder.Entity("HoaM.Domain.Features.Committee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CommunityId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DeletionDate")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("DissolvedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("EstablishedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MissionStatement")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.ToTable("Committees", (string)null);
                });

            modelBuilder.Entity("HoaM.Domain.Features.Community", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Communities", (string)null);
                });

            modelBuilder.Entity("HoaM.Domain.Features.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CommunityId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.ToTable("Documents", (string)null);
                });

            modelBuilder.Entity("HoaM.Domain.Features.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CommunityId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DeletionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.ToTable("Events", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Event");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("HoaM.Domain.Features.Lot", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CommunityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParcelId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("ParcelId");

                    b.ToTable("Lots", (string)null);
                });

            modelBuilder.Entity("HoaM.Domain.Features.Meeting", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CommitteeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CommunityId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DeletionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ScheduledDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CommitteeId");

                    b.HasIndex("CommunityId");

                    b.ToTable("Meetings", (string)null);
                });

            modelBuilder.Entity("HoaM.Domain.Features.MeetingMinutes", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DeletionDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MeetingId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("PublishedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Publisher")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId")
                        .IsUnique();

                    b.ToTable("MeetingMinutes", (string)null);
                });

            modelBuilder.Entity("HoaM.Domain.Features.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AssociationMemberId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ReadDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ReceivedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssociationMemberId");

                    b.HasIndex("TemplateId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("HoaM.Domain.Features.NotificationTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CommunityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.ToTable("NotificationTemplates", (string)null);
                });

            modelBuilder.Entity("HoaM.Domain.Features.Parcel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CommunityId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DeletionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParcelType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StreetName")
                        .HasColumnType("TEXT");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.ToTable("Parcels", (string)null);

                    b.HasDiscriminator<string>("ParcelType").HasValue("Parcel");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("HoaM.Domain.Features.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AssociationMemberId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CommunityId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("DeletionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParcelId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssociationMemberId");

                    b.HasIndex("CommunityId");

                    b.HasIndex("ParcelId");

                    b.ToTable("Transactions", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Transaction");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("HoaM.Infrastructure.Identity.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("HoaM.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<HoaM.Domain.AssociationMemberId>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<HoaM.Domain.AssociationMemberId>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<HoaM.Domain.AssociationMemberId>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<HoaM.Domain.AssociationMemberId>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<HoaM.Domain.AssociationMemberId>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HoaM.Domain.Features.PeriodicMeeting", b =>
                {
                    b.HasBaseType("HoaM.Domain.Features.Event");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Events", (string)null);

                    b.HasDiscriminator().HasValue("PeriodicMeeting");
                });

            modelBuilder.Entity("HoaM.Domain.Features.GreenSpace", b =>
                {
                    b.HasBaseType("HoaM.Domain.Features.Parcel");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Parcels", (string)null);

                    b.HasDiscriminator().HasValue("GreenSpace");
                });

            modelBuilder.Entity("HoaM.Domain.Features.Residence", b =>
                {
                    b.HasBaseType("HoaM.Domain.Features.Parcel");

                    b.ToTable("Parcels", (string)null);

                    b.HasDiscriminator().HasValue("Residence");
                });

            modelBuilder.Entity("HoaM.Domain.Features.Expense", b =>
                {
                    b.HasBaseType("HoaM.Domain.Features.Transaction");

                    b.ToTable("Transactions", (string)null);

                    b.HasDiscriminator().HasValue("Expense");
                });

            modelBuilder.Entity("HoaM.Domain.Features.Payment", b =>
                {
                    b.HasBaseType("HoaM.Domain.Features.Transaction");

                    b.ToTable("Transactions", (string)null);

                    b.HasDiscriminator().HasValue("Payment");
                });

            modelBuilder.Entity("AssociationMemberCommittee", b =>
                {
                    b.HasOne("HoaM.Domain.Features.Committee", null)
                        .WithMany()
                        .HasForeignKey("CommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HoaM.Domain.Features.AssociationMember", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AssociationMemberMeetingMinutes", b =>
                {
                    b.HasOne("HoaM.Domain.Features.AssociationMember", null)
                        .WithMany()
                        .HasForeignKey("AttendeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HoaM.Domain.Features.MeetingMinutes", null)
                        .WithMany()
                        .HasForeignKey("MeetingMinutesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HoaM.Domain.Features.Article", b =>
                {
                    b.HasOne("HoaM.Domain.Features.Community", null)
                        .WithMany("Articles")
                        .HasForeignKey("CommunityId");
                });

            modelBuilder.Entity("HoaM.Domain.Features.AssociationFee", b =>
                {
                    b.HasOne("HoaM.Domain.Features.Community", null)
                        .WithMany("AssociationFees")
                        .HasForeignKey("CommunityId");

                    b.OwnsOne("HoaM.Domain.Features.Occurrence", "Occurrence", b1 =>
                        {
                            b1.Property<Guid>("AssociationFeeId")
                                .HasColumnType("TEXT");

                            b1.Property<DateTimeOffset>("Start")
                                .HasColumnType("TEXT");

                            b1.Property<DateTimeOffset>("Stop")
                                .HasColumnType("TEXT");

                            b1.HasKey("AssociationFeeId");

                            b1.ToTable("AssociationFees");

                            b1.WithOwner()
                                .HasForeignKey("AssociationFeeId");
                        });

                    b.OwnsOne("HoaM.Domain.Features.Schedule", "Schedule", b1 =>
                        {
                            b1.Property<Guid>("AssociationFeeId")
                                .HasColumnType("TEXT");

                            b1.Property<DateTimeOffset?>("EndsAt")
                                .HasColumnType("TEXT");

                            b1.Property<TimeSpan>("Interval")
                                .HasColumnType("TEXT");

                            b1.HasKey("AssociationFeeId");

                            b1.ToTable("AssociationFees");

                            b1.WithOwner()
                                .HasForeignKey("AssociationFeeId");
                        });

                    b.Navigation("Occurrence")
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("HoaM.Domain.Features.AssociationMember", b =>
                {
                    b.HasOne("HoaM.Domain.Features.Community", null)
                        .WithMany("AssociationMembers")
                        .HasForeignKey("CommunityId");

                    b.HasOne("HoaM.Domain.Features.Residence", "Residence")
                        .WithMany("Residents")
                        .HasForeignKey("ParcelId");

                    b.OwnsMany("HoaM.Domain.CommitteeAssignment", "Commitments", b1 =>
                        {
                            b1.Property<Guid>("AssociationMemberId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<Guid>("CommitteeId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CommitteeRole")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("AssociationMemberId", "Id");

                            b1.ToTable("CommitteeAssignment");

                            b1.WithOwner()
                                .HasForeignKey("AssociationMemberId");
                        });

                    b.OwnsOne("HoaM.Domain.Features.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("AssociationMemberId")
                                .HasColumnType("TEXT");

                            b1.Property<bool>("IsVerified")
                                .HasColumnType("INTEGER");

                            b1.HasKey("Id");

                            b1.HasIndex("AssociationMemberId")
                                .IsUnique();

                            b1.ToTable("Emails", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("AssociationMemberId");
                        });

                    b.OwnsMany("HoaM.Domain.Features.PhoneNumber", "PhoneNumbers", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<string>("AreaCode")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("AssociationMemberId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CountryCode")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Prefix")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<int>("Type")
                                .HasColumnType("INTEGER");

                            b1.HasKey("Id");

                            b1.HasIndex("AssociationMemberId");

                            b1.ToTable("PhoneNumbers", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("AssociationMemberId");
                        });

                    b.Navigation("Commitments");

                    b.Navigation("Email");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("Residence");
                });

            modelBuilder.Entity("HoaM.Domain.Features.AuditLog", b =>
                {
                    b.HasOne("HoaM.Domain.Features.AssociationMember", null)
                        .WithMany()
                        .HasForeignKey("Who")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("HoaM.Domain.Features.Committee", b =>
                {
                    b.HasOne("HoaM.Domain.Features.Community", null)
                        .WithMany("Committees")
                        .HasForeignKey("CommunityId");

                    b.OwnsMany("HoaM.Domain.Features.Note", "AdditionalDetails", b1 =>
                        {
                            b1.Property<Guid>("CommitteeId")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("CreatedBy")
                                .HasColumnType("TEXT");

                            b1.Property<DateTimeOffset>("CreatedDate")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("LastModifiedBy")
                                .HasColumnType("TEXT");

                            b1.Property<DateTimeOffset?>("LastModifiedDate")
                                .HasColumnType("TEXT");

                            b1.HasKey("CommitteeId", "Id");

                            b1.ToTable("Committees_AdditionalDetails");

                            b1.WithOwner()
                                .HasForeignKey("CommitteeId");
                        });

                    b.Navigation("AdditionalDetails");
                });

            modelBuilder.Entity("HoaM.Domain.Features.Document", b =>
                {
                    b.HasOne("HoaM.Domain.Features.Community", null)
                        .WithMany("Documents")
                        .HasForeignKey("CommunityId");
                });

            modelBuilder.Entity("HoaM.Domain.Features.Event", b =>
                {
                    b.HasOne("HoaM.Domain.Features.Community", null)
                        .WithMany("Events")
                        .HasForeignKey("CommunityId");

                    b.OwnsOne("HoaM.Domain.Features.Occurrence", "Occurrence", b1 =>
                        {
                            b1.Property<Guid>("EventId")
                                .HasColumnType("TEXT");

                            b1.Property<DateTimeOffset>("Start")
                                .HasColumnType("TEXT");

                            b1.Property<DateTimeOffset>("Stop")
                                .HasColumnType("TEXT");

                            b1.HasKey("EventId");

                            b1.ToTable("Events");

                            b1.WithOwner()
                                .HasForeignKey("EventId");
                        });

                    b.OwnsOne("HoaM.Domain.Features.Schedule", "Schedule", b1 =>
                        {
                            b1.Property<Guid>("EventId")
                                .HasColumnType("TEXT");

                            b1.Property<DateTimeOffset?>("EndsAt")
                                .HasColumnType("TEXT");

                            b1.Property<TimeSpan>("Interval")
                                .HasColumnType("TEXT");

                            b1.HasKey("EventId");

                            b1.ToTable("Events");

                            b1.WithOwner()
                                .HasForeignKey("EventId");
                        });

                    b.Navigation("Occurrence")
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("HoaM.Domain.Features.Lot", b =>
                {
                    b.HasOne("HoaM.Domain.Features.Community", null)
                        .WithMany("Lots")
                        .HasForeignKey("CommunityId");

                    b.HasOne("HoaM.Domain.Features.Parcel", null)
                        .WithMany("Lots")
                        .HasForeignKey("ParcelId");
                });

            modelBuilder.Entity("HoaM.Domain.Features.Meeting", b =>
                {
                    b.HasOne("HoaM.Domain.Features.Committee", "Committee")
                        .WithMany("Meetings")
                        .HasForeignKey("CommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HoaM.Domain.Features.Community", null)
                        .WithMany("Meeting")
                        .HasForeignKey("CommunityId");

                    b.OwnsMany("HoaM.Domain.Features.Note", "Agenda", b1 =>
                        {
                            b1.Property<Guid>("MeetingId")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("CreatedBy")
                                .HasColumnType("TEXT");

                            b1.Property<DateTimeOffset>("CreatedDate")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("LastModifiedBy")
                                .HasColumnType("TEXT");

                            b1.Property<DateTimeOffset?>("LastModifiedDate")
                                .HasColumnType("TEXT");

                            b1.HasKey("MeetingId", "Id");

                            b1.ToTable("Meetings_Agenda");

                            b1.WithOwner()
                                .HasForeignKey("MeetingId");
                        });

                    b.Navigation("Agenda");

                    b.Navigation("Committee");
                });

            modelBuilder.Entity("HoaM.Domain.Features.MeetingMinutes", b =>
                {
                    b.HasOne("HoaM.Domain.Features.Meeting", "Meeting")
                        .WithOne("Minutes")
                        .HasForeignKey("HoaM.Domain.Features.MeetingMinutes", "MeetingId");

                    b.OwnsMany("HoaM.Domain.Features.ActionItem", "ActionItems", b1 =>
                        {
                            b1.Property<Guid>("MeetingMinutesId")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("AssignedTo")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("CreatedBy")
                                .HasColumnType("TEXT");

                            b1.Property<DateTimeOffset>("CreatedDate")
                                .HasColumnType("TEXT");

                            b1.Property<bool>("IsCompleted")
                                .HasColumnType("INTEGER");

                            b1.Property<Guid>("LastModifiedBy")
                                .HasColumnType("TEXT");

                            b1.Property<DateTimeOffset?>("LastModifiedDate")
                                .HasColumnType("TEXT");

                            b1.HasKey("MeetingMinutesId", "Id");

                            b1.ToTable("ActionItems", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MeetingMinutesId");
                        });

                    b.OwnsMany("HoaM.Domain.Features.Note", "AgendaNotes", b1 =>
                        {
                            b1.Property<Guid>("MeetingMinutesId")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("CreatedBy")
                                .HasColumnType("TEXT");

                            b1.Property<DateTimeOffset>("CreatedDate")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("LastModifiedBy")
                                .HasColumnType("TEXT");

                            b1.Property<DateTimeOffset?>("LastModifiedDate")
                                .HasColumnType("TEXT");

                            b1.HasKey("MeetingMinutesId", "Id");

                            b1.ToTable("MeetingMinutes_AgendaNotes");

                            b1.WithOwner()
                                .HasForeignKey("MeetingMinutesId");
                        });

                    b.OwnsMany("HoaM.Domain.Features.Note", "Notes", b1 =>
                        {
                            b1.Property<Guid>("MeetingMinutesId")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("CreatedBy")
                                .HasColumnType("TEXT");

                            b1.Property<DateTimeOffset>("CreatedDate")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("LastModifiedBy")
                                .HasColumnType("TEXT");

                            b1.Property<DateTimeOffset?>("LastModifiedDate")
                                .HasColumnType("TEXT");

                            b1.HasKey("MeetingMinutesId", "Id");

                            b1.ToTable("MeetingMinutes_Notes");

                            b1.WithOwner()
                                .HasForeignKey("MeetingMinutesId");
                        });

                    b.Navigation("ActionItems");

                    b.Navigation("AgendaNotes");

                    b.Navigation("Meeting");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("HoaM.Domain.Features.Notification", b =>
                {
                    b.HasOne("HoaM.Domain.Features.AssociationMember", "Recipient")
                        .WithMany("Notifications")
                        .HasForeignKey("AssociationMemberId");

                    b.HasOne("HoaM.Domain.Features.NotificationTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("HoaM.Domain.Features.NotificationTemplate", b =>
                {
                    b.HasOne("HoaM.Domain.Features.Community", null)
                        .WithMany("Notifications")
                        .HasForeignKey("CommunityId");
                });

            modelBuilder.Entity("HoaM.Domain.Features.Parcel", b =>
                {
                    b.HasOne("HoaM.Domain.Features.Community", null)
                        .WithMany("Parcels")
                        .HasForeignKey("CommunityId");
                });

            modelBuilder.Entity("HoaM.Domain.Features.Transaction", b =>
                {
                    b.HasOne("HoaM.Domain.Features.AssociationMember", "SubmittedBy")
                        .WithMany()
                        .HasForeignKey("AssociationMemberId");

                    b.HasOne("HoaM.Domain.Features.Community", null)
                        .WithMany("Transactions")
                        .HasForeignKey("CommunityId");

                    b.HasOne("HoaM.Domain.Features.Parcel", null)
                        .WithMany("Transactions")
                        .HasForeignKey("ParcelId");

                    b.OwnsOne("HoaM.Domain.Features.Note", "Memo", b1 =>
                        {
                            b1.Property<Guid>("TransactionId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("CreatedBy")
                                .HasColumnType("TEXT");

                            b1.Property<DateTimeOffset>("CreatedDate")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("LastModifiedBy")
                                .HasColumnType("TEXT");

                            b1.Property<DateTimeOffset?>("LastModifiedDate")
                                .HasColumnType("TEXT");

                            b1.HasKey("TransactionId");

                            b1.ToTable("Transactions");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId");
                        });

                    b.Navigation("Memo");

                    b.Navigation("SubmittedBy");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<HoaM.Domain.AssociationMemberId>", b =>
                {
                    b.HasOne("HoaM.Infrastructure.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<HoaM.Domain.AssociationMemberId>", b =>
                {
                    b.HasOne("HoaM.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<HoaM.Domain.AssociationMemberId>", b =>
                {
                    b.HasOne("HoaM.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<HoaM.Domain.AssociationMemberId>", b =>
                {
                    b.HasOne("HoaM.Infrastructure.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HoaM.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<HoaM.Domain.AssociationMemberId>", b =>
                {
                    b.HasOne("HoaM.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HoaM.Domain.Features.GreenSpace", b =>
                {
                    b.OwnsOne("HoaM.Domain.Features.Note", "Description", b1 =>
                        {
                            b1.Property<Guid>("GreenSpaceId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("CreatedBy")
                                .HasColumnType("TEXT");

                            b1.Property<DateTimeOffset>("CreatedDate")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("LastModifiedBy")
                                .HasColumnType("TEXT");

                            b1.Property<DateTimeOffset?>("LastModifiedDate")
                                .HasColumnType("TEXT");

                            b1.HasKey("GreenSpaceId");

                            b1.ToTable("Parcels");

                            b1.WithOwner()
                                .HasForeignKey("GreenSpaceId");
                        });

                    b.OwnsOne("HoaM.Domain.Features.OpeningHours", "OpeningHours", b1 =>
                        {
                            b1.Property<Guid>("GreenSpaceId")
                                .HasColumnType("TEXT");

                            b1.Property<TimeOnly>("ClosingTime")
                                .HasColumnType("TEXT");

                            b1.Property<TimeOnly>("OpeningTime")
                                .HasColumnType("TEXT");

                            b1.HasKey("GreenSpaceId");

                            b1.ToTable("Parcels");

                            b1.WithOwner()
                                .HasForeignKey("GreenSpaceId");
                        });

                    b.OwnsMany("HoaM.Domain.Text", "Amenities", b1 =>
                        {
                            b1.Property<Guid>("ParcelId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("ParcelId", "Id");

                            b1.ToTable("Parcels_Amenities");

                            b1.WithOwner()
                                .HasForeignKey("ParcelId");
                        });

                    b.OwnsMany("HoaM.Domain.Text", "Rules", b1 =>
                        {
                            b1.Property<Guid>("ParcelId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("ParcelId", "Id");

                            b1.ToTable("Parcels_Rules");

                            b1.WithOwner()
                                .HasForeignKey("ParcelId");
                        });

                    b.Navigation("Amenities");

                    b.Navigation("Description");

                    b.Navigation("OpeningHours")
                        .IsRequired();

                    b.Navigation("Rules");
                });

            modelBuilder.Entity("HoaM.Domain.Features.AssociationMember", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("HoaM.Domain.Features.Committee", b =>
                {
                    b.Navigation("Meetings");
                });

            modelBuilder.Entity("HoaM.Domain.Features.Community", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("AssociationFees");

                    b.Navigation("AssociationMembers");

                    b.Navigation("Committees");

                    b.Navigation("Documents");

                    b.Navigation("Events");

                    b.Navigation("Lots");

                    b.Navigation("Meeting");

                    b.Navigation("Notifications");

                    b.Navigation("Parcels");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("HoaM.Domain.Features.Meeting", b =>
                {
                    b.Navigation("Minutes");
                });

            modelBuilder.Entity("HoaM.Domain.Features.Parcel", b =>
                {
                    b.Navigation("Lots");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("HoaM.Domain.Features.Residence", b =>
                {
                    b.Navigation("Residents");
                });
#pragma warning restore 612, 618
        }
    }
}
